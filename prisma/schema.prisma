// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BannedEmails {
  sum    String  @id @db.VarChar(64)
  reason String?

  @@map("banned_emails")
}

model Users {
  id                       Int                     @id @default(autoincrement())
  username                 String                  @unique @db.VarChar(24)
  email                    String                  @unique
  admin                    Boolean                 @default(false)
  password                 String
  verified_at              DateTime?
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  user_profile             UserProfiles?
  otp_verification         OtpVerifications?
  password_change_requests PasswordChangeRequests?
  sessions                 Sessions[]
  email_changes            EmailChanges[]

  @@map("users")
}

model UserProfiles {
  user_id      Int     @id
  user         Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  display_name String  @db.VarChar(32)
  bio          String?
  avatar_id    Int?
  avatar       Images? @relation(fields: [avatar_id], references: [id], onDelete: SetNull)
  instagram    String?
  facebook     String?
  twitter      String?

  @@map("user_profiles")
}

model OtpVerifications {
  user_id    Int      @id
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  otp        String   @db.VarChar(6)
  expires_at DateTime

  @@map("otp_verifications")
}

model PasswordChangeRequests {
  user_id    Int      @id
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  otp        String   @unique @db.Uuid
  expires_at DateTime

  @@map("password_change_requests")
}

model EmailChanges {
  uuid          String         @id @db.Uuid
  user_id       Int
  user          Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  old_email_sum String         @db.VarChar(64)
  email_dispute EmailDisputes?
  created_at    DateTime       @default(now())

  @@map("email_changes")
}

model EmailDisputes {
  uuid              String       @id @db.Uuid
  email_change_uuid String       @unique @db.Uuid
  email_change      EmailChanges @relation(fields: [email_change_uuid], references: [uuid], onDelete: Cascade)
  context           String
  resolved_at       DateTime?
  created_at        DateTime     @default(now())

  @@map("email_disputes")
}

model Sessions {
  uuid       String   @id @db.Uuid
  user_id    Int
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_agent String
  expires_at DateTime

  @@map("sessions")
}

model Images {
  id            Int            @id @default(autoincrement())
  sum           String         @unique @db.VarChar(64)
  user_profiles UserProfiles[]

  @@map("images")
}
